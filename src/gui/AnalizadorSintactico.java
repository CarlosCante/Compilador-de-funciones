
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 29 23:18:48 CST 2017
//----------------------------------------------------

package gui;

import java_cup.runtime.*;
import Modulos.*;
import Thompson.*;
import GeneracionHtml.*;
import java.io.FileReader;
import javax.swing.JOptionPane;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 29 23:18:48 CST 2017
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\005\000\002\007" +
    "\004\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\007\000\002\006\010\000" +
    "\002\004\003\000\002\004\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\017\010\000\002\020\006\000\002" +
    "\021\007\000\002\012\007\000\002\014\011\000\002\013" +
    "\010\000\002\013\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\012\004\001\002\000\010\013\016\016" +
    "\014\034\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\012\012\ufffe\013\ufffe\016\ufffe\034" +
    "\ufffe\001\002\000\012\012\ufffb\013\ufffb\016\ufffb\034\ufffb" +
    "\001\002\000\012\012\ufffd\013\ufffd\016\ufffd\034\ufffd\001" +
    "\002\000\004\020\124\001\002\000\012\012\123\013\016" +
    "\016\014\034\012\001\002\000\004\020\044\001\002\000" +
    "\012\012\ufffc\013\ufffc\016\ufffc\034\ufffc\001\002\000\004" +
    "\015\017\001\002\000\004\016\020\001\002\000\004\020" +
    "\021\001\002\000\034\005\040\014\027\015\033\017\026" +
    "\022\024\023\023\025\025\032\037\033\032\035\036\037" +
    "\030\040\034\041\031\001\002\000\004\004\042\001\002" +
    "\000\006\004\ufff0\014\ufff0\001\002\000\006\004\ufff1\014" +
    "\ufff1\001\002\000\006\004\uffef\014\uffef\001\002\000\004" +
    "\014\ufff8\001\002\000\006\004\ufff5\014\ufff5\001\002\000" +
    "\006\004\uffed\014\uffed\001\002\000\006\004\uffeb\014\uffeb" +
    "\001\002\000\006\004\ufff2\014\ufff2\001\002\000\006\004" +
    "\ufff4\014\ufff4\001\002\000\006\004\uffec\014\uffec\001\002" +
    "\000\004\014\041\001\002\000\006\004\uffee\014\uffee\001" +
    "\002\000\006\004\ufff3\014\ufff3\001\002\000\006\004\ufff6" +
    "\014\ufff6\001\002\000\012\012\ufff9\013\ufff9\016\ufff9\034" +
    "\ufff9\001\002\000\032\005\040\014\027\015\033\022\024" +
    "\023\023\025\025\032\037\033\032\035\036\037\030\040" +
    "\034\041\031\001\002\000\004\014\ufff7\001\002\000\030" +
    "\006\050\007\047\010\056\011\053\016\052\024\046\035" +
    "\060\036\045\037\054\040\057\041\055\001\002\000\030" +
    "\006\050\007\047\010\056\011\053\016\052\024\046\035" +
    "\060\036\045\037\054\040\057\041\055\001\002\000\032" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\016\uffd9\020\uffd9\024" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\032\006\uffd6\007\uffd6\010\uffd6\011\uffd6\016\uffd6\020" +
    "\uffd6\024\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\001\002\000\032\006\uffd7\007\uffd7\010\uffd7\011\uffd7\016" +
    "\uffd7\020\uffd7\024\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\004\020\067\001\002\000\032\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\016\uffdb\020\uffdb\024\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000" +
    "\032\006\uffda\007\uffda\010\uffda\011\uffda\016\uffda\020\uffda" +
    "\024\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\001" +
    "\002\000\030\006\050\007\047\010\056\011\053\016\052" +
    "\024\046\035\060\036\045\037\054\040\057\041\055\001" +
    "\002\000\030\006\050\007\047\010\056\011\053\016\052" +
    "\024\046\035\060\036\045\037\054\040\057\041\055\001" +
    "\002\000\032\006\uffd8\007\uffd8\010\uffd8\011\uffd8\016\uffd8" +
    "\020\uffd8\024\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\001\002\000\030\006\050\007\047\010\056\011\053" +
    "\016\052\024\046\035\060\036\045\037\054\040\057\041" +
    "\055\001\002\000\030\006\050\007\047\010\056\011\053" +
    "\016\052\024\046\035\060\036\045\037\054\040\057\041" +
    "\055\001\002\000\030\006\050\007\047\010\056\011\053" +
    "\016\052\024\046\035\060\036\045\037\054\040\057\041" +
    "\055\001\002\000\032\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\016\uffe0\020\uffe0\024\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\001\002\000\032\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\016\uffdd\020\uffdd\024\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\001\002\000\032\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\016\uffdc\020\uffdc\024\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002\000\032\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\016\uffde\020\uffde\024\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\001\002\000\006" +
    "\014\104\020\105\001\002\000\004\021\070\001\002\000" +
    "\004\022\071\001\002\000\004\024\072\001\002\000\004" +
    "\025\075\001\002\000\004\023\074\001\002\000\006\014" +
    "\uffe7\020\uffe7\001\002\000\004\026\076\001\002\000\004" +
    "\025\077\001\002\000\004\027\100\001\002\000\004\025" +
    "\101\001\002\000\004\030\102\001\002\000\004\023\uffe6" +
    "\001\002\000\012\012\ufffa\013\ufffa\016\ufffa\034\ufffa\001" +
    "\002\000\012\012\uffe4\013\uffe4\016\uffe4\034\uffe4\001\002" +
    "\000\004\031\106\001\002\000\004\032\107\001\002\000" +
    "\004\024\112\001\002\000\006\024\uffe2\033\uffe2\001\002" +
    "\000\006\024\112\033\115\001\002\000\004\020\067\001" +
    "\002\000\004\014\114\001\002\000\006\024\uffe1\033\uffe1" +
    "\001\002\000\004\014\117\001\002\000\006\024\uffe3\033" +
    "\uffe3\001\002\000\012\012\uffe5\013\uffe5\016\uffe5\034\uffe5" +
    "\001\002\000\030\006\050\007\047\010\056\011\053\016" +
    "\052\024\046\035\060\036\045\037\054\040\057\041\055" +
    "\001\002\000\032\006\uffdf\007\uffdf\010\uffdf\011\uffdf\016" +
    "\uffdf\020\uffdf\024\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\001\002\000\012\012\uffff\013\uffff\016\uffff\034" +
    "\uffff\001\002\000\004\002\000\001\002\000\030\006\050" +
    "\007\047\010\056\011\053\016\052\024\046\035\060\036" +
    "\045\037\054\040\057\041\055\001\002\000\004\020\126" +
    "\001\002\000\004\034\127\001\002\000\004\022\132\001" +
    "\002\000\004\014\131\001\002\000\012\012\uffea\013\uffea" +
    "\016\uffea\034\uffea\001\002\000\004\026\133\001\002\000" +
    "\004\025\136\001\002\000\004\023\135\001\002\000\004" +
    "\014\uffe9\001\002\000\004\027\137\001\002\000\004\025" +
    "\140\001\002\000\004\030\141\001\002\000\004\023\uffe8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\002\004\001\001\000\014\006\014\007" +
    "\012\010\006\011\010\017\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\014\010\121" +
    "\011\010\017\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\034\005\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\042\001\001" +
    "\000\002\001\001\000\004\003\050\001\001\000\004\003" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\064\001\001\000\004\003\063" +
    "\001\001\000\002\001\001\000\004\003\062\001\001\000" +
    "\004\003\060\001\001\000\004\003\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\110\016" +
    "\107\001\001\000\002\001\001\000\004\016\115\001\001" +
    "\000\004\012\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\124\001\001\000\002" +
    "\001\001\000\004\020\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static Nodo raiz;
	public static Conjunto c;
	public static Listas listaS = new Listas();
	public int contE = 0;//conteo de errores
	public static Lista lis = AnalizadorLexico.lista;

    
    /********************** Reporte de error encontrado. right left *************************************************/

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        String val = "";
        int yline = 0;
        int ycol = 0;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            val = s.value.toString();
            yline = s.left;
            ycol = s.right;
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);

        lis.AddError(new Eror("Sintactico", val, yline, ycol));
		
		JOptionPane.showMessageDialog(null, "Error sintáctico no se esperaba" + m);
        System.err.println(m);
    }
   
    /******************************** Cuando se encuentra un error de donde el sistema no puede
    ********************************* recuperarse, se lanza un error fatal. Se despliega el mensaje
    ********************************* de error y se finaliza la ejecucion. */

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }

    /**metodo para crear html**/
    public static void crearHtml(){
		AnalizadorLexico.crearHtml();
    }

    public static void limpiarLista(){
        AnalizadorLexico.limpiarLista();
    }

   
   	/************************************* METODO PARA ANALIZAR UNA CADENA DE ENTRADA **********************************/

    public static void AnalizarGramatica(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico( 
	            							new AnalizadorLexico( 
	        									new FileReader(args[0])
	        								) 
        								);

            Object result = asin.parse().value;
            System.out.println("\n\n================================ SE FINALIZO EL ANALISIS ===================================");

            if(raiz != null){
            	JOptionPane.showMessageDialog(null, "El archivo no tiene errores");
            }else{
            	JOptionPane.showMessageDialog(null, "El archivo contiene errores");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= tDigito 
            {
              Object RESULT =null;
		int nDigitoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nDigitoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nDigito = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								int s0 = 0;
								Estado in = new Estado(String.valueOf(s0));
								s0 += 1;
								Estado fin = new Estado(String.valueOf(s0));
								s0 += 1;
								Transicion t = new Transicion(in, fin, nDigito);

								in.AddTransicion(t);

								Automata a = new Automata();
								a.setInicial(in);
								a.setFin(fin);
								a.AddEstados(in);
								a.AddEstados(fin);

								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= tEspecial 
            {
              Object RESULT =null;
		int nEspecialleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nEspecialright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nEspecial = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								String val = "";
								String val1 = "";
								boolean com = false;
								if(!(nEspecial.charAt(2) == (char)34)){
									if((int)nEspecial.charAt(2) == 116){
										val = String.valueOf((char) 9);
									}else{
										if((int) nEspecial.charAt(2) == 39){
											val = String.valueOf((char) 39);
										}
									}
									//val = Metodos.quitComillas(nEspecial);
								}else{
							        for(int i = 0; i < nEspecial.length(); i++){
							            if(i < nEspecial.length() - 1 && i != 0 && i != 1){
							                val1 += nEspecial.charAt(i);
							            }
							        }
									com = true;
								}

								int s0 = 0;
								Estado in = new Estado(String.valueOf(s0));
								s0 += 1;
								Estado fin = new Estado(String.valueOf(s0));
								s0 += 1;
								Transicion t = null;
								if(com){
									t = new Transicion(in, fin, val1);
								}else{
									t = new Transicion(in, fin, val);
								}
								

								in.AddTransicion(t);

								Automata a = new Automata();
								a.setInicial(in);
								a.setFin(fin);
								a.AddEstados(in);
								a.AddEstados(fin);

								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T ::= tCaracter 
            {
              Object RESULT =null;
		int nCaracterleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nCaracterright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nCaracter = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								String val = Metodos.quitComillas(nCaracter);

								int s0 = 0;
								Estado in = new Estado(String.valueOf(s0));
								s0 += 1;
								Estado fin = new Estado(String.valueOf(s0));
								s0 += 1;
								Transicion t = new Transicion(in, fin, val);

								in.AddTransicion(t);

								Automata a = new Automata();
								a.setInicial(in);
								a.setFin(fin);
								a.AddEstados(in);
								a.AddEstados(fin);

								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // T ::= tCadena 
            {
              Object RESULT =null;
		int nCadenaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nCadenaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nCadena = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								int s0 = 0;
								Automata a = new Automata();//se crea un automata

								String val = Metodos.quitComillas(nCadena);//se quita las comillas

								Estado in = new Estado(String.valueOf(s0));//se establece el estado inicial
								s0 += 1;

								a.setInicial(in);//se agrega el s0 al automata
								a.AddEstados(in);

								Estado tin = in;//variable de cambio de inicio para la transicion

								Estado aux = null;//variable aux para agregar el s0 final de la transicion

								for(int i = 0; i < val.length(); i++){

									aux = new Estado(String.valueOf(s0));//se crea un final
									s0 += 1;
									Transicion t = new Transicion(tin, aux, String.valueOf(val.charAt(i)));//desde el inical al final hay solamente 1 transicion
									tin.AddTransicion(t); // se guarda la transicion en la variable de cambio de inicio

									a.AddEstados(aux);//se agrega los nuevos esstados que aparescan

									tin = aux; //ahora el inicio va a ser el final
									//se repite el ciclo
								}
								a.setFin(aux);//terminado el ciclo se queda en el estado final aux

								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // T ::= tTodo 
            {
              Object RESULT =null;
		int nTodoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nTodoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nTodo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								int s0 = 0;
								Estado in = new Estado(String.valueOf(s0));
								s0 += 1;
								Estado fin = new Estado(String.valueOf(s0));
								s0 += 1;
								Transicion t = new Transicion(in, fin, nTodo);

								in.AddTransicion(t);

								Automata a = new Automata();
								a.setInicial(in);
								a.setFin(fin);
								a.AddEstados(in);
								a.AddEstados(fin);

								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= tId 
            {
              Object RESULT =null;
		int nIdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nIdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nId = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								int s0 = 0;
								Estado in = new Estado(String.valueOf(s0));
								s0 += 1;
								Estado fin = new Estado(String.valueOf(s0));
								s0 += 1;
								Transicion t = new Transicion(in, fin, nId);

								in.AddTransicion(t);

								Automata a = new Automata();
								a.setInicial(in);
								a.setFin(fin);
								a.AddEstados(in);
								a.AddEstados(fin);

								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= tSignoI T 
            {
              Object RESULT =null;
		int nSignoIleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nSignoIright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String nSignoI = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								//? = | e T
								int s0 = 0;
								Estado in = new Estado(String.valueOf(s0));
								s0 += 1;
								Estado fin = new Estado(String.valueOf(s0));
								s0 += 1;
								Transicion t = new Transicion(in, fin, ConstruirAFN.EPSILON);

								in.AddTransicion(t);

								Automata a = new Automata();
								a.setInicial(in);
								a.setFin(fin);
								a.AddEstados(in);
								a.AddEstados(fin);

								Automata afn = ConstruirAFN.ObtenerAFN("|", (Automata) nT, a);

								RESULT = afn;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // T ::= tMas T 
            {
              Object RESULT =null;
		int nTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								// + T  =  . T * T  //ver como comparar cuando son iguales los automatas
								Automata dif = ConstruirAFN.autDif((Automata) nT);

								Automata a = (Automata) nT;

								Automata c = ConstruirAFN.clonar(a);

								Automata kleene = ConstruirAFN.ObtenerAFN("*", a, null);

								Automata concatenacion = ConstruirAFN.ObtenerAFN(".", c, kleene);

								RESULT = concatenacion;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // T ::= tPor T 
            {
              Object RESULT =null;
		int nPorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nPorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String nPor = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								Automata sol = (Automata) nT;

								Automata kleene = ConstruirAFN.ObtenerAFN(nPor, sol, null);

								RESULT = kleene;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // T ::= tAnd T T 
            {
              Object RESULT =null;
		int nAndleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nAndright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String nAnd = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nT1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nT1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nT1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nT2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nT2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nT2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								Automata con = ConstruirAFN.ObtenerAFN(nAnd, (Automata) nT1, (Automata) nT2);

								RESULT = con;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // T ::= tOr T T 
            {
              Object RESULT =null;
		int nOrleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nOrright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String nOr = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nT1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nT1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nT1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nT2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nT2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nT2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								Automata a = ConstruirAFN.ObtenerAFN(nOr, (Automata) nT1, (Automata) nT2);
								RESULT = a;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION ::= tCadena RETORNO tPuntoComa 
            {
              Object RESULT =null;
		int nCadenaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nCadenaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String nCadena = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nRetornoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nRetornoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nRetorno = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
								ArrayList nret = (ArrayList) nRetorno;
								String cad = Metodos.quitComillas(nCadena);
								String t0 = Metodos.quitComillas(nret.get(0).toString());
								String t1 = Metodos.quitComillas(nret.get(1).toString());
								String t2 = Metodos.quitComillas(nret.get(2).toString());
								String t3 = Metodos.quitComillas(nret.get(3).toString());
								Retorno ret = new Retorno(cad, t0, t1, t2, t3);
								parser.listaS.getRetAux().add(ret);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PAL_RESERV ::= tPuntoComa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PAL_RESERV",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PAL_RESERV ::= tFlecha tReserv tCorcheteA FUNCIONES tCorcheteC tPuntoComa 
            {
              Object RESULT =null;
		
								ArrayList<Retorno> ret = (ArrayList<Retorno>) parser.listaS.getRetAux();
								RESULT = ret;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PAL_RESERV",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAM ::= tCadena tComa tYyText tComa tYyRow tComa tYyCol 
            {
              Object RESULT =null;
		int nCadenaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int nCadenaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		String nCadena = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int nTextleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int nTextright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String nText = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int nRowleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nRowright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String nRow = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nColleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nColright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nCol = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								ArrayList param = new ArrayList();
								param.add(nCadena);
								param.add(nText);
								param.add(nRow);
								param.add(nCol);

								RESULT = param;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAM",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RETORNO ::= tFlecha tRetorno tParentesisA PARAM tParentesisC 
            {
              Object RESULT =null;
		int nParamleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nParamright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nParam = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
								RESULT = nParam;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAM_E ::= tYyText tComa tYyRow tComa tYyCol 
            {
              Object RESULT =null;
		int nTextleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int nTextright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String nText = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int nRowleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nRowright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String nRow = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nColleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nColright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nCol = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								ArrayList param = new ArrayList();
								param.add(nText);
								param.add(nRow);
								param.add(nCol);

								RESULT = param;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAM_E",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETORNO_E ::= tError tParentesisA PARAM_E tParentesisC 
            {
              Object RESULT =null;
		int nParamleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nParamright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nParam = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
								RESULT = nParam;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("RETORNO_E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ERROR ::= tError tFlecha T tFlecha RETORNO_E tPuntoComa 
            {
              Object RESULT =null;
		int nErrorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int nErrorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String nError = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int nTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object nT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object mE = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
								ArrayList al = (ArrayList) mE;
								Erors er = new Erors(nError, (Automata) nT, al.get(0).toString(), al.get(1).toString(), al.get(2).toString());

								RESULT = er;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ERROR",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OTROEXPCONJ ::= tSignoI 
            {
              Object RESULT =null;
		int nSignoIleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nSignoIright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nSignoI = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nSignoI;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OTROEXPCONJ ::= tMas 
            {
              Object RESULT =null;
		int nMasleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nMasright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nMas = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nMas;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OTROEXPCONJ ::= tPor 
            {
              Object RESULT =null;
		int nPorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nPorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nPor = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nPor;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OTROEXPCONJ ::= tOr 
            {
              Object RESULT =null;
		int nOrleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nOrright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nOr = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nOr;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OTROEXPCONJ ::= tComa 
            {
              Object RESULT =null;
		int nComaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nComaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nComa = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nComa;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OTROEXPCONJ ::= tParentesisC 
            {
              Object RESULT =null;
		int nParectesisCleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nParectesisCright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nParectesisC = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nParectesisC;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OTROEXPCONJ ::= tParentesisA 
            {
              Object RESULT =null;
		int nParentesisAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nParentesisAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nParentesisA = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nParentesisA;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OTROEXPCONJ ::= tCorcheteC 
            {
              Object RESULT =null;
		int nCorcheteCleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nCorcheteCright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nCorcheteC = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nCorcheteC;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OTROEXPCONJ ::= tCorcheteA 
            {
              Object RESULT =null;
		int nCorcheteAleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nCorcheteAright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nCorcheteA = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nCorcheteA;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OTROEXPCONJ ::= tDosPuntos 
            {
              Object RESULT =null;
		int nDosPuntosleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nDosPuntosright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nDosPuntos = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nDosPuntos;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OTROEXPCONJ ::= tPuntoComa 
            {
              Object RESULT =null;
		int nPuntoComaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nPuntoComaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nPuntoComa = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nPuntoComa;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OTROEXPCONJ ::= tSimbolo 
            {
              Object RESULT =null;
		int nSimbololeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nSimboloright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nSimbolo = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nSimbolo;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTROEXPCONJ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPCONJ ::= OTROEXPCONJ tSep OTROEXPCONJ 
            {
              Object RESULT =null;
		int nOtroExpConj1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nOtroExpConj1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object nOtroExpConj1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nSepleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nSepright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String nSep = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nOtroExpConj2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nOtroExpConj2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nOtroExpConj2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								String val = "";
								val += nOtroExpConj1.toString();
								val += nSep.toString();
								val += nOtroExpConj2.toString();

								RESULT = val;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPCONJ",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPCONJ ::= tExpConj 
            {
              Object RESULT =null;
		int nExpConjleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nExpConjright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String nExpConj = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								RESULT = nExpConj;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPCONJ",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTO ::= tConj tDosPuntos tId tFlecha EXPCONJ tPuntoComa 
            {
              Object RESULT =null;
		int nIdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nIdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String nId = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nExpConjleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nExpConjright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nExpConj = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
								Conjunto cj = new Conjunto(nExpConj.toString(), nId);
								RESULT = cj;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= tId tFlecha T RETORNO PAL_RESERV 
            {
              Object RESULT =null;
		int nIdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int nIdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String nId = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int nTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object nT = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nRetornoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nRetornoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object nRetorno = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nPal_Reservleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nPal_Reservright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nPal_Reserv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								Automata afn = (Automata) nT;
								afn.CreateDot(nId + "_AFN");

								Tabla t = new Tabla();
								t.ConstruirAFD(afn);
								t.mostrar_Tabla();

								Automata afd = t.CreateAFD();
								afd.CreateDotAFD(nId + "_AFD");

								Sentencia s = new Sentencia(nId, afn, afd, t);
								ArrayList<Retorno> ret = (ArrayList<Retorno>) nPal_Reserv;

								s.setReservada(ret);
								
								ArrayList nret = (ArrayList) nRetorno;
								String t0 = Metodos.quitComillas(nret.get(0).toString());
								String t1 = Metodos.quitComillas(nret.get(1).toString());
								String t2 = Metodos.quitComillas(nret.get(2).toString());
								String t3 = Metodos.quitComillas(nret.get(3).toString());
								Retorno retornoS = new Retorno(t0, t1, t2, t3);

								s.setRet(retornoS);

								parser.listaS.setRetAux(new ArrayList<Retorno>());

								RESULT = s;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OTRA_SENT ::= ERROR 
            {
              Object RESULT =null;
		int nErrorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nErrorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nError = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								Erors e = (Erors) nError;

								if(parser.listaS.getErr() == null){
									parser.listaS.setErr(e);
									e.getExp().CreateDot(e.getId() + "_AFN");

									Tabla t = new Tabla();
									t.ConstruirAFD(e.getExp());

									Automata afd = t.CreateAFD();
									afd.CreateDotAFD(e.getId() + "_AFD");

									e.setExafd(afd);
									Retorno ret = new Retorno(e.getYyText(), e.getYyRow(), e.getYyCol());

									Sentencia s = new Sentencia(e.getId(), e.getExp(), afd, t);
									s.setRet(ret);

									parser.listaS.AddSentencias(s);

								}else{
									parser.contE += 1;
									parser.report_fatal_error("Doble sentencia Error", "Error");
									parser.lis.AddError(new Eror("Sintactico", "Mas de una sentencia de error", 0, 0));
								}
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTRA_SENT",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OTRA_SENT ::= CONJUNTO 
            {
              Object RESULT =null;
		int nConjuntoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nConjuntoright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nConjunto = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								parser.listaS.AddConjuntos((Conjunto) nConjunto);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTRA_SENT",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OTRA_SENT ::= SENTENCIA 
            {
              Object RESULT =null;
		int nSentencialeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nSentenciaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object nSentencia = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
								parser.listaS.AddSentencias((Sentencia) nSentencia);
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OTRA_SENT",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= OTRA_SENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS OTRA_SENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= tDoblePor SENTENCIAS tDoblePor 
            {
              Object RESULT =null;
		
								Nodo padre = new Nodo("S","",0,0);
								parser.raiz = padre;
							
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

